<?php

namespace Tests\Feature;

use App\Models\Customer;
use App\Models\Order;
use App\Models\Product;
use Illuminate\Support\Arr;
use Tests\TestCase;

class ControllerOrderTest extends TestCase
{
    private $order;
    private $customer;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create();
        $this->customer = Customer::factory()->create();
    }

    public function payloadProvider(): array
    {
        return [
            'test_valid_payload' => [
                [
                    'code',
                    'message',
                    'error',
                    'error_type',
                    'data' => [
                        'OrderId',
                        'OrderCode',
                        'OrderDate',
                        'TotalAmountWihtoutDiscount',
                        'TotalAmountWithDiscount',
                    ],
                ],
            ],
        ];
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testSaveOrder(
        array $expectedJsonResponse
    )
    {
        $products = Product::factory()->count(10)->create();

        foreach ($products as $product) {
            $cart[] = [
                'id' => $product->id,
                'price' => $product->price,
                'qtd' => rand(1, 4)
            ];
        }

        $response = $this->postJson('/api/orders',
            [
                'products' => $cart,
                'customer_id' => $this->customer->id,
            ]
        );

        $response
            ->assertStatus(200)
            ->assertJsonStructure($expectedJsonResponse);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testSaveOrderWithDiscount(
        array $expectedJsonResponse
    )
    {
        $products = Product::factory()->count(10)->create();
        foreach ($products as $product) {
            $cart[] = [
                'id' => $product->id,
                'price' => $product->price,
                'qtd' => rand(1, 10)
            ];
        }

        $response = $this->postJson('/api/orders',
            [
                'products' => $cart,
                'customer_id' => $this->customer->id,
            ]
        );
        $response
            ->assertStatus(200)
            ->assertJsonStructure($expectedJsonResponse);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testListOrder(
        array $expectedJsonResponse
    )
    {
        $response = $this->json("GET", "/api/orders");
        $response
            ->assertStatus(200)
            ->assertJsonStructure(Arr::add(Arr::except($expectedJsonResponse, 'data'), 'data',
                [
                    "*" => [
                        'OrderId',
                        'OrderCode',
                        'OrderDate',
                        'TotalAmountWihtoutDiscount',
                        'TotalAmountWithDiscount',
                    ],
                ]
            ));
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testUpdateOrder(
        array $expectedJsonResponse
    )
    {
        $products = Product::factory()->count(10)->create();
        foreach ($products as $product) {
            $cart[] = [
                'id' => $product->id,
                'price' => $product->price,
                'qtd' => rand(1, 10)
            ];
        }

        $response = $this->json("PUT", "/api/orders/{$this->order->id}",
            [
                'products' => $cart,
                'customer_id' => $this->customer->id,
            ]
        );

        $response
            ->assertStatus(200)
            ->assertJsonStructure($expectedJsonResponse);

    }

    /**
     * @dataProvider payloadProvider
     */
    public function testShowOrder(
        array $expectedJsonResponse
    )
    {
        $response = $this->getJson("/api/orders/{$this->order->id}");

        $response
            ->assertStatus(200)
            ->assertJsonStructure($expectedJsonResponse);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testDeleteOrder(
        array $expectedJsonResponse
    )
    {
        $response = $this->deleteJson("/api/orders/{$this->order->id}");
        $response
            ->assertStatus(200)
            ->assertJsonStructure(Arr::add(Arr::except($expectedJsonResponse, 'data'), 'data', []));
    }
}
